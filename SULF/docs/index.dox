/*! @mainpage SULF - Stackable User-Level Filesystem.
<h3>Copyright &copy; 2004-2005 Valient Gough \<vgough\@pobox.com\></h3>
Distributed under the LGPL license, see COPYING for details.

@section introduction Introduction

SULF allows you to write a Linux filesystem in C#.  It uses the FUSE library to
do the actual Linux filesystem integration in user-space.

By using FUSE, the C# code can run entirely in user-space and not require any
special permissions to serve the filesystem.

SULF is meant to be useful to filesystem <i>developers</i>.  It currently
contains only a simple test filesystem to use for testing.

@section Changes Recent Changes

2005.04.29 -- 0.3, Queen's Day release
    - major API changes.  API has become simpler and is split into two
      libraries.  The Fuse.dll library communicates with the FUSE kernel module
      and provides an API based on simple C# interfaces (Node, FileNode,
      DirNode).  The Sulf.dll library builds on Fuse.dll and provides a more
      natural interface to C# objects (a Hashmap can be used as a directory,
      string as a file, etc).
    - Updated FuseWrapper and Fuse interfaces for FUSE 2.3 (Kernel api version
      6.1)

2005.01.15
    - updated FuseWrapper and Fuse interfaces for FUSE 2.1 compatibility.
    - implemented simple Hello-World filesystem in examples subdirectory, which
      is similar to libfuse's example/hello.c

2005.01.13
    - release under LGPL license
    - simplify build system to make it easier to build
    - add snapshot (see @ref downloads)

@section downloads Downloads

SULF is kept in revision control using Darcs (http://abridgegame.org/darcs/).
The current development branch is available here:
http://arg0.net/users/vgough/devel/sulf

An easier way to get started is to use the snapshot, which contains pre-built
objects: <a href="http://arg0.net/users/vgough/download/sulf-0.3.tar.gz">sulf-0.3.tar.gz</a>

See also @ref dependencies , and @ref getting-started

@section attempts Previous Attempts

<b>The old way</b>

My first attempt at building a C# wrapper for fuse was based on capturing all
the callbacks from libfuse in C code, and then have a conversion layer
translate that into calls to C# code (using internal Mono C# API). This worked,
but had some downsides:
    - required internal Mono API, so it couldn't be compiled or run with other
      C# compilers or runtimes.

    - could only run in single-threaded mode, since libfuse's threads created
      from C code would not play well with Mono's thread state.

<b>The new way</b>

The current method is significantly different. The C# code takes control
immediately and talks directly to the FUSE kernel module with the help of a
some C code (and wrappers generated automatically by SWIG).

This no longer requires the use of Mono internal API's, and it also allows the
filesystem to run multi-threaded. The downside is that the FUSE kernel
interface has been more variable then the libfuse interface, which means that
the C# interface will work with fewer versions of the FUSE code tree.


@section fuse-design Interface Design - Fuse.dll

Implementing a filesystem using Fuse.dll requires implementing three sets of
interfaces.  These interfaces correspond to the type of function calls that
they will handle:  filesystem level, directory level, and file level.

1. Fuse.FileSystem interface, which defines a Stat operation and a means of
getting the top level directory.

2. Fuse.DirNode interface, which is used for access to directories (one of
which is returned by the filesystem level -- FileSystem.RootNode):

3. Fuse.FileNode interface is used for access to normal files

In addition to this three way split, the DirNode and FileNode interfaces also
come in two flavors -- one for read-only objects, and another with write
support.  The Fuse.dll dispatch handler knows how to treat a file based on the
interfaces it implements.  For example, if a DirNode returns an object which
implements FileNode (but not MutableFileNode), then the file will be read-only.


@section sulf-design Interface Design - Sulf.dll

The higher-level interface - Sulf.dll is meant to be a better / easier starting
point for most filesystems, unless you need the full power of the underlying
Fuse.dll interface.

The Sulf.dll design is meant to translate from the Fuse.dll api into something
more transparent to C# objects.  This layer is newer and is in development.

TODO: more to come.  See examples and Sulf directories.


@section dependencies Dependencies

Sulf relies on these projects:

FUSE 2.3 (Filesystem in User SpacE):  http://sourceforge.net/projects/fuse

Mono (C# compiler and runtime):  http://go-mono.org

SWIG (Simplified Wrapper and Interface Generator): http://www.swig.org/
<b>Must use SWIG >= 1.3.24</b>.  SWIG's C# output has been maturing recently,
and SULF will not build with earlier versions of SWIG..


@section getting-started Getting Started

As long as you have the necessary dependencies statisfied, you can build the
SULF libraries and a simple test filesystem by doing the following:

@code
autoreconf      # build configure script

./configure
make

cd examples     

make run        # run hello-fs example which mounts to /tmp/hellofs
@endcode
*/
