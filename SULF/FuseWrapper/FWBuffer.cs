/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

public class FWBuffer : IDisposable, BufferWritable {
  private IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal FWBuffer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(FWBuffer obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  protected FWBuffer() : this(IntPtr.Zero, false) {
  }

  ~FWBuffer() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      FuseWrapperPINVOKE.delete_FWBuffer(swigCPtr);
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
  }

  public int offset {
    set {
      FuseWrapperPINVOKE.set_FWBuffer_offset(swigCPtr, value);
    } 
    get {
      return FuseWrapperPINVOKE.get_FWBuffer_offset(swigCPtr);
    } 
  }

  public int initialized {
    get {
      return FuseWrapperPINVOKE.get_FWBuffer_initialized(swigCPtr);
    } 
  }

  public int length {
    get {
      return FuseWrapperPINVOKE.get_FWBuffer_length(swigCPtr);
    } 
  }

  public string data {
    get {
      return FuseWrapperPINVOKE.get_FWBuffer_data(swigCPtr);
    } 
  }

  public FWBuffer(int size) : this(FuseWrapperPINVOKE.new_FWBuffer(size), true) {
  }

  public void Rewind() {
    FuseWrapperPINVOKE.FWBuffer_Rewind(swigCPtr);
  }

  public void Reset() {
    FuseWrapperPINVOKE.FWBuffer_Reset(swigCPtr);
  }

  public int EnsureFreeSpace(int freeBytes) {
    return FuseWrapperPINVOKE.FWBuffer_EnsureFreeSpace(swigCPtr, freeBytes);
  }

  public int Read(int fd) {
    return FuseWrapperPINVOKE.FWBuffer_Read__SWIG_0(swigCPtr, fd);
  }

  public int Read(int fd, uint count, ulong offset) {
    return FuseWrapperPINVOKE.FWBuffer_Read__SWIG_1(swigCPtr, fd, count, offset);
  }

  public int Write(int fd, uint count, ulong offset) {
    return FuseWrapperPINVOKE.FWBuffer_Write__SWIG_0(swigCPtr, fd, count, offset);
  }

  public int Write(int fd) {
    return FuseWrapperPINVOKE.FWBuffer_Write__SWIG_1(swigCPtr, fd);
  }

  public string GetString() {
    return FuseWrapperPINVOKE.FWBuffer_GetString(swigCPtr);
  }

  public int GetBytes(string data, int len) {
    return FuseWrapperPINVOKE.FWBuffer_GetBytes(swigCPtr, data, len);
  }

  public int GetByte() {
    return FuseWrapperPINVOKE.FWBuffer_GetByte(swigCPtr);
  }

  public int AddBytes(string data, int len) {
    return FuseWrapperPINVOKE.FWBuffer_AddBytes(swigCPtr, data, len);
  }

  public int AddChar(int len, char value) {
    return FuseWrapperPINVOKE.FWBuffer_AddChar(swigCPtr, len, value);
  }

  public int AddString(string str) {
    return FuseWrapperPINVOKE.FWBuffer_AddString(swigCPtr, str);
  }

  public int AddSubString(string str, int offset, int len) {
    return FuseWrapperPINVOKE.FWBuffer_AddSubString(swigCPtr, str, offset, len);
  }

  public int AddBuffer(FWBuffer arg) {
    return FuseWrapperPINVOKE.FWBuffer_AddBuffer(swigCPtr, FWBuffer.getCPtr(arg));
  }

  public int copyTo(FWBuffer outBuf) {
    return FuseWrapperPINVOKE.FWBuffer_copyTo(swigCPtr, FWBuffer.getCPtr(outBuf));
  }

}
