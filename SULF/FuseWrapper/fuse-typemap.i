/* DO NOT EDIT -- Automatically generated by autotypemap */

%typemap(csinterfaces) struct fuse_entry_out "IDisposable, BufferWritable"
%extend fuse_entry_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_entry_out ) }
};

%typemap(csinterfaces) struct fuse_forget_in "IDisposable, BufferReadable"
%extend fuse_forget_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_forget_in ) }
};

%typemap(csinterfaces) struct fuse_attr_out "IDisposable, BufferWritable"
%extend fuse_attr_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_attr_out ) }
};

%typemap(csinterfaces) struct fuse_mknod_in "IDisposable, BufferReadable"
%extend fuse_mknod_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_mknod_in ) }
};

%typemap(csinterfaces) struct fuse_mkdir_in "IDisposable, BufferReadable"
%extend fuse_mkdir_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_mkdir_in ) }
};

%typemap(csinterfaces) struct fuse_rename_in "IDisposable, BufferReadable"
%extend fuse_rename_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_rename_in ) }
};

%typemap(csinterfaces) struct fuse_link_in "IDisposable, BufferReadable"
%extend fuse_link_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_link_in ) }
};

%typemap(csinterfaces) struct fuse_setattr_in "IDisposable, BufferReadable"
%extend fuse_setattr_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_setattr_in ) }
};

%typemap(csinterfaces) struct fuse_open_in "IDisposable, BufferReadable"
%extend fuse_open_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_open_in ) }
};

%typemap(csinterfaces) struct fuse_open_out "IDisposable, BufferWritable"
%extend fuse_open_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_open_out ) }
};

%typemap(csinterfaces) struct fuse_release_in "IDisposable, BufferReadable"
%extend fuse_release_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_release_in ) }
};

%typemap(csinterfaces) struct fuse_flush_in "IDisposable, BufferReadable"
%extend fuse_flush_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_flush_in ) }
};

%typemap(csinterfaces) struct fuse_read_in "IDisposable, BufferReadable"
%extend fuse_read_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_read_in ) }
};

%typemap(csinterfaces) struct fuse_write_in "IDisposable, BufferReadable"
%extend fuse_write_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_write_in ) }
};

%typemap(csinterfaces) struct fuse_write_out "IDisposable, BufferWritable"
%extend fuse_write_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_write_out ) }
};

%typemap(csinterfaces) struct fuse_statfs_out "IDisposable, BufferWritable"
%extend fuse_statfs_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_statfs_out ) }
};

%typemap(csinterfaces) struct fuse_fsync_in "IDisposable, BufferReadable"
%extend fuse_fsync_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_fsync_in ) }
};

%typemap(csinterfaces) struct fuse_setxattr_in "IDisposable, BufferReadable"
%extend fuse_setxattr_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_setxattr_in ) }
};

%typemap(csinterfaces) struct fuse_getxattr_in "IDisposable, BufferReadable"
%extend fuse_getxattr_in {
    %immutable;
    int copyFrom( struct FWBuffer *buf ) { READSTRUCT( buf, fuse_getxattr_in ) }
};

%typemap(csinterfaces) struct fuse_getxattr_out "IDisposable, BufferWritable"
%extend fuse_getxattr_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_getxattr_out ) }
};

%typemap(csinterfaces) struct fuse_init_in_out "IDisposable, BufferWritable"
%extend fuse_init_in_out {
    int copyTo( struct FWBuffer *buf ) { WRITESTRUCT( buf, fuse_init_in_out ) }
};

